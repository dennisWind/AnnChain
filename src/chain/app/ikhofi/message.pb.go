// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

/*
Package ikhofi is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Execution
	Query
	TxInfo
	Result
	TransactionPb
	TransactionPbTmp
*/
package ikhofi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Execution struct {
	Version  int32    `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Id       string   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Method   string   `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	Args     []string `protobuf:"bytes,4,rep,name=args" json:"args,omitempty"`
	TxInfo   *TxInfo  `protobuf:"bytes,5,opt,name=txInfo" json:"txInfo,omitempty"`
	ByteCode []byte   `protobuf:"bytes,6,opt,name=byteCode,proto3" json:"byteCode,omitempty"`
}

func (m *Execution) Reset()                    { *m = Execution{} }
func (m *Execution) String() string            { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()               {}
func (*Execution) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Execution) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Execution) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Execution) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Execution) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Execution) GetTxInfo() *TxInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *Execution) GetByteCode() []byte {
	if m != nil {
		return m.ByteCode
	}
	return nil
}

type Query struct {
	Version int32    `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Id      string   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Method  string   `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	Args    []string `protobuf:"bytes,4,rep,name=args" json:"args,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Query) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Query) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Query) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Query) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type TxInfo struct {
	BlockHeight    int64  `protobuf:"varint,1,opt,name=blockHeight" json:"blockHeight,omitempty"`
	LastCommitHash []byte `protobuf:"bytes,2,opt,name=lastCommitHash,proto3" json:"lastCommitHash,omitempty"`
	TxFrom         string `protobuf:"bytes,3,opt,name=txFrom" json:"txFrom,omitempty"`
	BlockTime      int64  `protobuf:"varint,4,opt,name=blockTime" json:"blockTime,omitempty"`
	TxHash         []byte `protobuf:"bytes,5,opt,name=txHash,proto3" json:"txHash,omitempty"`
}

func (m *TxInfo) Reset()                    { *m = TxInfo{} }
func (m *TxInfo) String() string            { return proto.CompactTextString(m) }
func (*TxInfo) ProtoMessage()               {}
func (*TxInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TxInfo) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TxInfo) GetLastCommitHash() []byte {
	if m != nil {
		return m.LastCommitHash
	}
	return nil
}

func (m *TxInfo) GetTxFrom() string {
	if m != nil {
		return m.TxFrom
	}
	return ""
}

func (m *TxInfo) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *TxInfo) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

type Result struct {
	Version int32  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Code    int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Msg     string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
	Value   string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Result) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Result) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TransactionPb struct {
	From     []byte   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To       string   `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Method   string   `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	Args     []string `protobuf:"bytes,4,rep,name=args" json:"args,omitempty"`
	Bytecode []byte   `protobuf:"bytes,5,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	Nonce    int64    `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
	V        []byte   `protobuf:"bytes,7,opt,name=v,proto3" json:"v,omitempty"`
	R        []byte   `protobuf:"bytes,8,opt,name=r,proto3" json:"r,omitempty"`
	S        []byte   `protobuf:"bytes,9,opt,name=s,proto3" json:"s,omitempty"`
	Hash     []byte   `protobuf:"bytes,10,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TransactionPb) Reset()                    { *m = TransactionPb{} }
func (m *TransactionPb) String() string            { return proto.CompactTextString(m) }
func (*TransactionPb) ProtoMessage()               {}
func (*TransactionPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TransactionPb) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TransactionPb) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionPb) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *TransactionPb) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *TransactionPb) GetBytecode() []byte {
	if m != nil {
		return m.Bytecode
	}
	return nil
}

func (m *TransactionPb) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactionPb) GetV() []byte {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *TransactionPb) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *TransactionPb) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *TransactionPb) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type TransactionPbTmp struct {
	From     []byte   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To       string   `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Method   string   `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	Args     []string `protobuf:"bytes,4,rep,name=args" json:"args,omitempty"`
	Bytecode []byte   `protobuf:"bytes,5,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	Nonce    int64    `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *TransactionPbTmp) Reset()                    { *m = TransactionPbTmp{} }
func (m *TransactionPbTmp) String() string            { return proto.CompactTextString(m) }
func (*TransactionPbTmp) ProtoMessage()               {}
func (*TransactionPbTmp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TransactionPbTmp) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TransactionPbTmp) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionPbTmp) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *TransactionPbTmp) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *TransactionPbTmp) GetBytecode() []byte {
	if m != nil {
		return m.Bytecode
	}
	return nil
}

func (m *TransactionPbTmp) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterType((*Execution)(nil), "ikhofi.Execution")
	proto.RegisterType((*Query)(nil), "ikhofi.Query")
	proto.RegisterType((*TxInfo)(nil), "ikhofi.TxInfo")
	proto.RegisterType((*Result)(nil), "ikhofi.Result")
	proto.RegisterType((*TransactionPb)(nil), "ikhofi.TransactionPb")
	proto.RegisterType((*TransactionPbTmp)(nil), "ikhofi.TransactionPbTmp")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0xe5, 0xcd, 0x9f, 0x36, 0xd3, 0xed, 0xaa, 0xb2, 0x2a, 0x64, 0x21, 0x0e, 0x51, 0x0e,
	0x55, 0x4e, 0x7b, 0x80, 0x47, 0xa8, 0x40, 0xe5, 0x06, 0x56, 0xae, 0x20, 0xe5, 0x8f, 0x37, 0xb1,
	0x1a, 0xc7, 0x95, 0xed, 0x44, 0xdb, 0xf7, 0xe0, 0x01, 0xb8, 0xf0, 0x3c, 0xbc, 0x12, 0xf2, 0x38,
	0x4b, 0x81, 0x03, 0x12, 0x07, 0xd4, 0xdb, 0xfc, 0xbe, 0x24, 0x33, 0x9f, 0xbf, 0x71, 0xe0, 0x52,
	0x09, 0x6b, 0xeb, 0x5e, 0xec, 0x1f, 0x8c, 0x76, 0x9a, 0xa6, 0xf2, 0x7e, 0xd0, 0x07, 0x59, 0x7c,
	0x23, 0x90, 0xbd, 0x3d, 0x8a, 0x76, 0x76, 0x52, 0x4f, 0x94, 0xc1, 0xd9, 0x22, 0x8c, 0x95, 0x7a,
	0x62, 0x24, 0x27, 0x65, 0xc2, 0x4f, 0x48, 0x77, 0xb0, 0x91, 0x1d, 0xdb, 0xe4, 0xa4, 0xcc, 0xf8,
	0x46, 0x76, 0xf4, 0x05, 0xa4, 0x4a, 0xb8, 0x41, 0x77, 0x2c, 0x42, 0x6d, 0x25, 0x4a, 0x21, 0xae,
	0x4d, 0x6f, 0x59, 0x9c, 0x47, 0x65, 0xc6, 0xb1, 0xa6, 0x37, 0x90, 0xba, 0xe3, 0xfb, 0xe9, 0xa0,
	0x59, 0x92, 0x93, 0xf2, 0xe2, 0xf5, 0x6e, 0x1f, 0x86, 0xef, 0x2b, 0x54, 0xf9, 0xfa, 0x94, 0xbe,
	0x84, 0xf3, 0xe6, 0xd1, 0x89, 0x5b, 0xdd, 0x09, 0x96, 0xe6, 0xa4, 0xdc, 0xf2, 0x9f, 0x5c, 0x7c,
	0x82, 0xe4, 0xe3, 0x2c, 0xcc, 0xe3, 0xff, 0xb1, 0x58, 0x7c, 0x25, 0x90, 0x06, 0x37, 0x34, 0x87,
	0x8b, 0x66, 0xd4, 0xed, 0xfd, 0x9d, 0x90, 0xfd, 0xe0, 0x70, 0x48, 0xc4, 0x7f, 0x95, 0xe8, 0x0d,
	0xec, 0xc6, 0xda, 0xba, 0x5b, 0xad, 0x94, 0x74, 0x77, 0xb5, 0x1d, 0x70, 0xe8, 0x96, 0xff, 0xa1,
	0x7a, 0x03, 0xee, 0xf8, 0xce, 0x68, 0x75, 0x32, 0x10, 0x88, 0xbe, 0x82, 0x0c, 0xdb, 0x55, 0x52,
	0x09, 0x16, 0x63, 0xff, 0x27, 0x21, 0x7c, 0x85, 0x5d, 0x13, 0xec, 0xba, 0x52, 0xf1, 0x19, 0x52,
	0x2e, 0xec, 0x3c, 0xba, 0xbf, 0x44, 0x40, 0x21, 0x6e, 0x7d, 0x7a, 0x1b, 0x94, 0xb1, 0xa6, 0x57,
	0x10, 0x29, 0xdb, 0xaf, 0x16, 0x7c, 0x49, 0xaf, 0x21, 0x59, 0xea, 0x71, 0x0e, 0xb3, 0x33, 0x1e,
	0xa0, 0xf8, 0x4e, 0xe0, 0xb2, 0x32, 0xf5, 0x64, 0xeb, 0xd6, 0xdf, 0x85, 0x0f, 0x8d, 0xef, 0x76,
	0xf0, 0xee, 0x09, 0xfa, 0xc0, 0xda, 0x87, 0xec, 0xf4, 0x29, 0x64, 0xa7, 0xff, 0xe9, 0x1e, 0xac,
	0xfb, 0x45, 0x87, 0xc9, 0xd3, 0x7e, 0xd1, 0xe5, 0x35, 0x24, 0x93, 0x9e, 0xda, 0xb0, 0xf8, 0x88,
	0x07, 0xa0, 0x5b, 0x20, 0x0b, 0x3b, 0xc3, 0x57, 0xc9, 0xe2, 0xc9, 0xb0, 0xf3, 0x40, 0xc6, 0x93,
	0x65, 0x59, 0x20, 0xeb, 0xe7, 0x0d, 0x3e, 0x33, 0x08, 0x5e, 0x7d, 0x5d, 0x7c, 0x21, 0x70, 0xf5,
	0xdb, 0x89, 0x2a, 0xf5, 0xf0, 0xfc, 0x87, 0x6a, 0x52, 0xfc, 0x03, 0xdf, 0xfc, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x53, 0x5c, 0x8e, 0x4d, 0x92, 0x03, 0x00, 0x00,
}
